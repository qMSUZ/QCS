# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
Quantum Computing Simulator (QCS) port of ANSI C/C++/FORTRAN library of quantum
computations routines for Python and other languages supported by SWIG.
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _qcs
else:
    import _qcs

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


QCS_ACCURACY = _qcs.QCS_ACCURACY
QCS_EPS = _qcs.QCS_EPS
QCS_PI = _qcs.QCS_PI
QCS_TRUE = _qcs.QCS_TRUE
QCS_FALSE = _qcs.QCS_FALSE

def qcs_max(a, b):
    return _qcs.qcs_max(a, b)

def qcs_min(a, b):
    return _qcs.qcs_min(a, b)

def qcs_max_float(a, b):
    return _qcs.qcs_max_float(a, b)

def qcs_min_float(a, b):
    return _qcs.qcs_min_float(a, b)

def qcs_max_double(a, b):
    return _qcs.qcs_max_double(a, b)

def qcs_min_double(a, b):
    return _qcs.qcs_min_double(a, b)

def qcs_max_tf_qcs_real_number(a, b):
    return _qcs.qcs_max_tf_qcs_real_number(a, b)

def qcs_min_tf_qcs_real_number(a, b):
    return _qcs.qcs_min_tf_qcs_real_number(a, b)

def qcs_sqr(a):
    return _qcs.qcs_sqr(a)

def qcs_dec2bin(n, nbits, t):
    return _qcs.qcs_dec2bin(n, nbits, t)

def qcs_dec2base_d(n, nbits, base, t):
    return _qcs.qcs_dec2base_d(n, nbits, base, t)

def qcs_numbase_d2int(t):
    return _qcs.qcs_numbase_d2int(t)

def qcs_bin2dec(t):
    return _qcs.qcs_bin2dec(t)

def qcs_base_d2dec(t, base):
    return _qcs.qcs_base_d2dec(t, base)

def qcs_str_insert_at(pos, bit, str):
    return _qcs.qcs_str_insert_at(pos, bit, str)

def qcs_mod(value, modulo):
    return _qcs.qcs_mod(value, modulo)

def qcs_newton_symbol(n, k):
    return _qcs.qcs_newton_symbol(n, k)

def qcs_power_mod(a, k, n):
    return _qcs.qcs_power_mod(a, k, n)

def qcs_fast_power_mod(b, x, m):
    return _qcs.qcs_fast_power_mod(b, x, m)

def qcs_kronecker_delta_function(k, j):
    return _qcs.qcs_kronecker_delta_function(k, j)

def qcs_diffclock(clock1, clock2):
    return _qcs.qcs_diffclock(clock1, clock2)

def reset_and_start_timer():
    return _qcs.reset_and_start_timer()

def get_elapsed_mcycles():
    return _qcs.get_elapsed_mcycles()

def get_elapsed_cycles_raw():
    return _qcs.get_elapsed_cycles_raw()

def CPUSupportsSSE2():
    return _qcs.CPUSupportsSSE2()

def CPUSupportsSSE4():
    return _qcs.CPUSupportsSSE4()

def CPUSupportsAVX():
    return _qcs.CPUSupportsAVX()
class Matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m = property(_qcs.Matrix_m_get, _qcs.Matrix_m_set)
    rows = property(_qcs.Matrix_rows_get, _qcs.Matrix_rows_set)
    cols = property(_qcs.Matrix_cols_get, _qcs.Matrix_cols_set)
    q = property(_qcs.Matrix_q_get, _qcs.Matrix_q_set)
    freedom_level = property(_qcs.Matrix_freedom_level_get, _qcs.Matrix_freedom_level_set)

    def __init__(self):
        _qcs.Matrix_swiginit(self, _qcs.new_Matrix())
    __swig_destroy__ = _qcs.delete_Matrix

# Register Matrix in _qcs:
_qcs.Matrix_swigregister(Matrix)
class Matrix4x4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m = property(_qcs.Matrix4x4_m_get, _qcs.Matrix4x4_m_set)
    w1 = property(_qcs.Matrix4x4_w1_get, _qcs.Matrix4x4_w1_set)
    w2 = property(_qcs.Matrix4x4_w2_get, _qcs.Matrix4x4_w2_set)
    w3 = property(_qcs.Matrix4x4_w3_get, _qcs.Matrix4x4_w3_set)
    w4 = property(_qcs.Matrix4x4_w4_get, _qcs.Matrix4x4_w4_set)
    x1 = property(_qcs.Matrix4x4_x1_get, _qcs.Matrix4x4_x1_set)
    x2 = property(_qcs.Matrix4x4_x2_get, _qcs.Matrix4x4_x2_set)
    x3 = property(_qcs.Matrix4x4_x3_get, _qcs.Matrix4x4_x3_set)
    x4 = property(_qcs.Matrix4x4_x4_get, _qcs.Matrix4x4_x4_set)
    q = property(_qcs.Matrix4x4_q_get, _qcs.Matrix4x4_q_set)
    freedom_level = property(_qcs.Matrix4x4_freedom_level_get, _qcs.Matrix4x4_freedom_level_set)

    def __init__(self):
        _qcs.Matrix4x4_swiginit(self, _qcs.new_Matrix4x4())
    __swig_destroy__ = _qcs.delete_Matrix4x4

# Register Matrix4x4 in _qcs:
_qcs.Matrix4x4_swigregister(Matrix4x4)
class IMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m = property(_qcs.IMatrix_m_get, _qcs.IMatrix_m_set)
    rows = property(_qcs.IMatrix_rows_get, _qcs.IMatrix_rows_set)
    cols = property(_qcs.IMatrix_cols_get, _qcs.IMatrix_cols_set)

    def __init__(self):
        _qcs.IMatrix_swiginit(self, _qcs.new_IMatrix())
    __swig_destroy__ = _qcs.delete_IMatrix

# Register IMatrix in _qcs:
_qcs.IMatrix_swigregister(IMatrix)
class IMatrix4x4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m = property(_qcs.IMatrix4x4_m_get, _qcs.IMatrix4x4_m_set)
    w1 = property(_qcs.IMatrix4x4_w1_get, _qcs.IMatrix4x4_w1_set)
    w2 = property(_qcs.IMatrix4x4_w2_get, _qcs.IMatrix4x4_w2_set)
    w3 = property(_qcs.IMatrix4x4_w3_get, _qcs.IMatrix4x4_w3_set)
    w4 = property(_qcs.IMatrix4x4_w4_get, _qcs.IMatrix4x4_w4_set)
    x1 = property(_qcs.IMatrix4x4_x1_get, _qcs.IMatrix4x4_x1_set)
    x2 = property(_qcs.IMatrix4x4_x2_get, _qcs.IMatrix4x4_x2_set)
    x3 = property(_qcs.IMatrix4x4_x3_get, _qcs.IMatrix4x4_x3_set)
    x4 = property(_qcs.IMatrix4x4_x4_get, _qcs.IMatrix4x4_x4_set)

    def __init__(self):
        _qcs.IMatrix4x4_swiginit(self, _qcs.new_IMatrix4x4())
    __swig_destroy__ = _qcs.delete_IMatrix4x4

# Register IMatrix4x4 in _qcs:
_qcs.IMatrix4x4_swigregister(IMatrix4x4)
class SchmidtDecomposition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    is_entangled = property(_qcs.SchmidtDecomposition_is_entangled_get, _qcs.SchmidtDecomposition_is_entangled_set)
    schmidt_coeff_number = property(_qcs.SchmidtDecomposition_schmidt_coeff_number_get, _qcs.SchmidtDecomposition_schmidt_coeff_number_set)
    base1 = property(_qcs.SchmidtDecomposition_base1_get, _qcs.SchmidtDecomposition_base1_set)
    base2 = property(_qcs.SchmidtDecomposition_base2_get, _qcs.SchmidtDecomposition_base2_set)
    schmidt_coeff = property(_qcs.SchmidtDecomposition_schmidt_coeff_get, _qcs.SchmidtDecomposition_schmidt_coeff_set)

    def __init__(self):
        _qcs.SchmidtDecomposition_swiginit(self, _qcs.new_SchmidtDecomposition())
    __swig_destroy__ = _qcs.delete_SchmidtDecomposition

# Register SchmidtDecomposition in _qcs:
_qcs.SchmidtDecomposition_swigregister(SchmidtDecomposition)
class SpectralDecomposition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eigenvectors = property(_qcs.SpectralDecomposition_eigenvectors_get, _qcs.SpectralDecomposition_eigenvectors_set)
    eigenvalues = property(_qcs.SpectralDecomposition_eigenvalues_get, _qcs.SpectralDecomposition_eigenvalues_set)

    def __init__(self):
        _qcs.SpectralDecomposition_swiginit(self, _qcs.new_SpectralDecomposition())
    __swig_destroy__ = _qcs.delete_SpectralDecomposition

# Register SpectralDecomposition in _qcs:
_qcs.SpectralDecomposition_swigregister(SpectralDecomposition)
class SVDDecomposition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    U = property(_qcs.SVDDecomposition_U_get, _qcs.SVDDecomposition_U_set)
    S = property(_qcs.SVDDecomposition_S_get, _qcs.SVDDecomposition_S_set)
    V = property(_qcs.SVDDecomposition_V_get, _qcs.SVDDecomposition_V_set)

    def __init__(self):
        _qcs.SVDDecomposition_swiginit(self, _qcs.new_SVDDecomposition())
    __swig_destroy__ = _qcs.delete_SVDDecomposition

# Register SVDDecomposition in _qcs:
_qcs.SVDDecomposition_swigregister(SVDDecomposition)

def qcs_create_matrix(rows, cols):
    return _qcs.qcs_create_matrix(rows, cols)

def qcs_create_eye_matrix(size):
    return _qcs.qcs_create_eye_matrix(size)

def qcs_create_matrix_for_quantum_state(q, freedom_level):
    return _qcs.qcs_create_matrix_for_quantum_state(q, freedom_level)

def qcs_create_empty_matrix():
    return _qcs.qcs_create_empty_matrix()

def qcs_create_vector_column(rows):
    return _qcs.qcs_create_vector_column(rows)

def qcs_create_random_vector_column(rows):
    return _qcs.qcs_create_random_vector_column(rows)

def qcs_create_random_vector_column_normalised(rows):
    return _qcs.qcs_create_random_vector_column_normalised(rows)

def qcs_create_random_real_vector_column(rows):
    return _qcs.qcs_create_random_real_vector_column(rows)

def qcs_create_random_real_vector_column_normalised(rows):
    return _qcs.qcs_create_random_real_vector_column_normalised(rows)

def qcs_create_unitary_random_real_matrix(size):
    return _qcs.qcs_create_unitary_random_real_matrix(size)

def qcs_create_unitary_random_matrix(size):
    return _qcs.qcs_create_unitary_random_matrix(size)

def qcs_create_unitary_random_real_matrix_by_qr(size):
    return _qcs.qcs_create_unitary_random_real_matrix_by_qr(size)

def qcs_create_unitary_random_matrix_by_qr(size):
    return _qcs.qcs_create_unitary_random_matrix_by_qr(size)

def qcs_create_density_random_real_matrix(size):
    return _qcs.qcs_create_density_random_real_matrix(size)

def qcs_create_density_random_matrix(size):
    return _qcs.qcs_create_density_random_matrix(size)

def qcs_create_hermitian_random_real_matrix(size):
    return _qcs.qcs_create_hermitian_random_real_matrix(size)

def qcs_create_hermitian_random_matrix(size):
    return _qcs.qcs_create_hermitian_random_matrix(size)

def qcs_create_matrix_arange_operation(_start, _end, _step):
    return _qcs.qcs_create_matrix_arange_operation(_start, _end, _step)

def qcs_create_matrix_linspace_operation_with_endpoint(_start, _end, _n_count):
    return _qcs.qcs_create_matrix_linspace_operation_with_endpoint(_start, _end, _n_count)

def qcs_create_matrix_linspace_operation_without_endpoint(_start, _end, _n_count):
    return _qcs.qcs_create_matrix_linspace_operation_without_endpoint(_start, _end, _n_count)

def qcs_create_matrix_arange_operation_with_float_args(_start, _end, _step):
    return _qcs.qcs_create_matrix_arange_operation_with_float_args(_start, _end, _step)

def qcs_create_matrix_linspace_operation_with_endpoint_with_float_args(_start, _end, _n_count):
    return _qcs.qcs_create_matrix_linspace_operation_with_endpoint_with_float_args(_start, _end, _n_count)

def qcs_create_matrix_linspace_operation_without_endpoint_with_float_args(_start, _end, _n_count):
    return _qcs.qcs_create_matrix_linspace_operation_without_endpoint_with_float_args(_start, _end, _n_count)

def qcs_create_create_operator(N):
    return _qcs.qcs_create_create_operator(N)

def qcs_create_destroy_operator(N):
    return _qcs.qcs_create_destroy_operator(N)

def qcs_delete_matrix(a_out):
    return _qcs.qcs_delete_matrix(a_out)

def qcs_copy_matrix(a_in, b_out):
    return _qcs.qcs_copy_matrix(a_in, b_out)

def qcs_clone_matrix(a_in):
    return _qcs.qcs_clone_matrix(a_in)

def qcs_eye_matrix(a_in):
    return _qcs.qcs_eye_matrix(a_in)

def qcs_eye_matrix_with_param(a_in, p):
    return _qcs.qcs_eye_matrix_with_param(a_in, p)

def qcs_zero_matrix(a_in):
    return _qcs.qcs_zero_matrix(a_in)

def qcs_roundn_matrix(a_in, n):
    return _qcs.qcs_roundn_matrix(a_in, n)

def qcs_chop_matrix(a_in):
    return _qcs.qcs_chop_matrix(a_in)

def qcs_fill_matrix(a_in):
    return _qcs.qcs_fill_matrix(a_in)

def qcs_fill_random_real_values(a_in):
    return _qcs.qcs_fill_random_real_values(a_in)

def qcs_fill_random_complex_values(a_in):
    return _qcs.qcs_fill_random_complex_values(a_in)

def qcs_make_projector_from_vector(vec_in, prj_out):
    return _qcs.qcs_make_projector_from_vector(vec_in, prj_out)

def qcs_normalise_real_matrix(a_in):
    return _qcs.qcs_normalise_real_matrix(a_in)

def qcs_get_column_from_matrix(a_in, c):
    return _qcs.qcs_get_column_from_matrix(a_in, c)

def qcs_get_row_from_matrix(a_in, r):
    return _qcs.qcs_get_row_from_matrix(a_in, r)

def qcs_get_column_from_matrix_into_vector(a_in, c, vec_out):
    return _qcs.qcs_get_column_from_matrix_into_vector(a_in, c, vec_out)

def qcs_set_cell_at_matrix_complex(a_in, r, c, b_in):
    return _qcs.qcs_set_cell_at_matrix_complex(a_in, r, c, b_in)

def qcs_set_cell_at_matrix_direct(a_in, r, c, re, im):
    return _qcs.qcs_set_cell_at_matrix_direct(a_in, r, c, re, im)

def qcs_get_cell_at_matrix_complex(a_in, r, c):
    return _qcs.qcs_get_cell_at_matrix_complex(a_in, r, c)

def qcs_calc_dot_of_vector(vec_in):
    return _qcs.qcs_calc_dot_of_vector(vec_in)

def qcs_calc_dot_of_two_vector(vec_in_1, vec_in_2):
    return _qcs.qcs_calc_dot_of_two_vector(vec_in_1, vec_in_2)

def qcs_non_zero_elements_of_matrix(a_in):
    return _qcs.qcs_non_zero_elements_of_matrix(a_in)

def qcs_det_matrix(a_in, b_out):
    return _qcs.qcs_det_matrix(a_in, b_out)

def qcs_inv_matrix(a_in):
    return _qcs.qcs_inv_matrix(a_in)

def qcs_inv_2x2_matrix(a_in):
    return _qcs.qcs_inv_2x2_matrix(a_in)

def qcs_transpose_matrix(a_in):
    return _qcs.qcs_transpose_matrix(a_in)

def qcs_partial_transpose_matrix_qudit(a_in, i):
    return _qcs.qcs_partial_transpose_matrix_qudit(a_in, i)

def qcs_calculate_d_dot_dt_matrix(a_in):
    return _qcs.qcs_calculate_d_dot_dt_matrix(a_in)

def qcs_matrix_realignment(a_in, out_in):
    return _qcs.qcs_matrix_realignment(a_in, out_in)

def qcs_matrix_realignment2(a_in, out_in):
    return _qcs.qcs_matrix_realignment2(a_in, out_in)

def qcs_swap_block_matrix(a_in, r1, c1, r2, c2, size_r, size_c):
    return _qcs.qcs_swap_block_matrix(a_in, r1, c1, r2, c2, size_r, size_c)

def qcs_add_matrix(a_in, b_in, c_out):
    return _qcs.qcs_add_matrix(a_in, b_in, c_out)

def qcs_sub_matrix(a_in, b_in, c_out):
    return _qcs.qcs_sub_matrix(a_in, b_in, c_out)

def qcs_mul_matrix(a_in, b_in, c_out):
    return _qcs.qcs_mul_matrix(a_in, b_in, c_out)

def qcs_add_isM_matrix(a_in, b_in, c_in):
    return _qcs.qcs_add_isM_matrix(a_in, b_in, c_in)

def qcs_sub_isM_matrix(a_in, b_in, c_in):
    return _qcs.qcs_sub_isM_matrix(a_in, b_in, c_in)

def qcs_add_scalar_matrix(a_in, b_in, c_out):
    return _qcs.qcs_add_scalar_matrix(a_in, b_in, c_out)

def qcs_sub_scalar_matrix(a_in, b_in, c_out):
    return _qcs.qcs_sub_scalar_matrix(a_in, b_in, c_out)

def qcs_mul_scalar_matrix(a_in, b_in, c_out):
    return _qcs.qcs_mul_scalar_matrix(a_in, b_in, c_out)

def qcs_div_scalar_matrix(a_in, b_in, c_out):
    return _qcs.qcs_div_scalar_matrix(a_in, b_in, c_out)

def qcs_scalar_mul_matrix(a_mat, b_in):
    return _qcs.qcs_scalar_mul_matrix(a_mat, b_in)

def qcs_basic_sum_matrix(a_in, b_in, c_out):
    return _qcs.qcs_basic_sum_matrix(a_in, b_in, c_out)

def qcs_tensor_matrix(a_in, b_in, c_out):
    return _qcs.qcs_tensor_matrix(a_in, b_in, c_out)

def qcs_basic_sum(a_in, b_in):
    return _qcs.qcs_basic_sum(a_in, b_in)

def qcs_tensor_product(a_in, b_in):
    return _qcs.qcs_tensor_product(a_in, b_in)

def qcs_partial_transpose_matrix(a_in, n):
    return _qcs.qcs_partial_transpose_matrix(a_in, n)

def qcs_create_partial_trace_matrix_1_qubit(a_in, n):
    return _qcs.qcs_create_partial_trace_matrix_1_qubit(a_in, n)

def qcs_create_partial_trace_matrix_n_qubit(a_in, _from, _to):
    return _qcs.qcs_create_partial_trace_matrix_n_qubit(a_in, _from, _to)

def qcs_create_partial_trace_matrix_1_qudit(a_in, i):
    return _qcs.qcs_create_partial_trace_matrix_1_qudit(a_in, i)

def qcs_spectral_decompose_of_matrix(a_mat, eigenvalues, eigenvectors):
    return _qcs.qcs_spectral_decompose_of_matrix(a_mat, eigenvalues, eigenvectors)

def qcs_svd_decompose_of_matrix(state, out_coeff, out_base1, out_base2):
    return _qcs.qcs_svd_decompose_of_matrix(state, out_coeff, out_base1, out_base2)

def qcs_square_root_of_operator_matrix(a_mat):
    return _qcs.qcs_square_root_of_operator_matrix(a_mat)

def qcs_square_root_of_operator_matrix_self(a_mat):
    return _qcs.qcs_square_root_of_operator_matrix_self(a_mat)

def qcs_calculate_norm1_of_column_vector(a_mat, norm_val_out):
    return _qcs.qcs_calculate_norm1_of_column_vector(a_mat, norm_val_out)

def qcs_calculate_norm2_of_column_vector(a_mat, norm_val_out):
    return _qcs.qcs_calculate_norm2_of_column_vector(a_mat, norm_val_out)

def qcs_norm_of_matrix(a_mat):
    return _qcs.qcs_norm_of_matrix(a_mat)

def qcs_norm_of_matrix_self(a_mat):
    return _qcs.qcs_norm_of_matrix_self(a_mat)

def qcs_exp_of_matrix(a_in):
    return _qcs.qcs_exp_of_matrix(a_in)

def qcs_infinity_norm_of_matrix(a):
    return _qcs.qcs_infinity_norm_of_matrix(a)

def qcs_entropy_of_matrix(a):
    return _qcs.qcs_entropy_of_matrix(a)

def qcs_linear_entropy_of_matrix(a):
    return _qcs.qcs_linear_entropy_of_matrix(a)

def qcs_negativity_of_matrix(a):
    return _qcs.qcs_negativity_of_matrix(a)

def qcs_fidelity(sigma, rho):
    return _qcs.qcs_fidelity(sigma, rho)

def qcs_square_of_fidelity(sigma, rho):
    return _qcs.qcs_square_of_fidelity(sigma, rho)

def qcs_super_fidelity(sigma, rho):
    return _qcs.qcs_super_fidelity(sigma, rho)

def qcs_trace_distance(rho, sigma):
    return _qcs.qcs_trace_distance(rho, sigma)

def qcs_hilbert_schmidt_distance(rho, sigma):
    return _qcs.qcs_hilbert_schmidt_distance(rho, sigma)

def qcs_bures_metric(sigma, rho):
    return _qcs.qcs_bures_metric(sigma, rho)

def qcs_angle_metric(sigma, rho):
    return _qcs.qcs_angle_metric(sigma, rho)

def qcs_sine_metric(sigma, rho):
    return _qcs.qcs_sine_metric(sigma, rho)

def qcs_eigenvalues_of_matrix(a_in):
    return _qcs.qcs_eigenvalues_of_matrix(a_in)

def qcs_add_noise_to_matrix(a, n):
    return _qcs.qcs_add_noise_to_matrix(a, n)

def qcs_trace_matrix(a_in):
    return _qcs.qcs_trace_matrix(a_in)

def qcs_trace_square_matrix(a_in):
    return _qcs.qcs_trace_square_matrix(a_in)

def qcs_trace_square_matrix_fast(a_in):
    return _qcs.qcs_trace_square_matrix_fast(a_in)

def qcs_calculate_sum_of_matrix(a_in):
    return _qcs.qcs_calculate_sum_of_matrix(a_in)

def qcs_print_eigenvalue_of_matrix(a):
    return _qcs.qcs_print_eigenvalue_of_matrix(a)

def qcs_make_eigenvectors_of_matrix(a):
    return _qcs.qcs_make_eigenvectors_of_matrix(a)

def qcs_print_matrix(a_in):
    return _qcs.qcs_print_matrix(a_in)

def qcs_print_matrix_only_real_part(a_in):
    return _qcs.qcs_print_matrix_only_real_part(a_in)

def qcs_print_matrix_dot(a_in, bits, base):
    return _qcs.qcs_print_matrix_dot(a_in, bits, base)

def qcs_print_matrix_in_matlab_format(a_in):
    return _qcs.qcs_print_matrix_in_matlab_format(a_in)

def qcs_print_matrix_in_matlab_format_with_prefix(a_in, prefix_str):
    return _qcs.qcs_print_matrix_in_matlab_format_with_prefix(a_in, prefix_str)

def qcs_print_matrix_in_mathematica_format(a_in):
    return _qcs.qcs_print_matrix_in_mathematica_format(a_in)

def qcs_print_matrix_to_file(a_in, b_out):
    return _qcs.qcs_print_matrix_to_file(a_in, b_out)

def qcs_print_matrix_to_file_sqr(a_in, b_out):
    return _qcs.qcs_print_matrix_to_file_sqr(a_in, b_out)

def qcs_print_matrix_to_file_sqr_01(a_in, b_out):
    return _qcs.qcs_print_matrix_to_file_sqr_01(a_in, b_out)

def qcs_print_matrix_to_file_sqr_mathematica(a_in, b_out):
    return _qcs.qcs_print_matrix_to_file_sqr_mathematica(a_in, b_out)

def qcs_print_matrix_to_file_sqr_matlab(a_in, b_out):
    return _qcs.qcs_print_matrix_to_file_sqr_matlab(a_in, b_out)

def qcs_save_matrix_as_flat_text_file_for_gnuplot(a_in, fname_out):
    return _qcs.qcs_save_matrix_as_flat_text_file_for_gnuplot(a_in, fname_out)

def qcs_create_schmidt_decomposition_empty():
    return _qcs.qcs_create_schmidt_decomposition_empty()

def qcs_create_schmidt_decomposition(b1, b2, sc):
    return _qcs.qcs_create_schmidt_decomposition(b1, b2, sc)

def qcs_delete_schmidt_decomposition(sd):
    return _qcs.qcs_delete_schmidt_decomposition(sd)

def qcs_compare_schmidt_decompositions(a, b, test_type):
    return _qcs.qcs_compare_schmidt_decompositions(a, b, test_type)

def qcs_create_spectral_decomposition():
    return _qcs.qcs_create_spectral_decomposition()

def qcs_delete_spectral_decomposition(sd):
    return _qcs.qcs_delete_spectral_decomposition(sd)

def qcs_create_svd_decomposition():
    return _qcs.qcs_create_svd_decomposition()

def qcs_delete_svd_decomposition(sd):
    return _qcs.qcs_delete_svd_decomposition(sd)

def qcs_matrix_ispure(a):
    return _qcs.qcs_matrix_ispure(a)

def qcs_mixing_two_density_matrix(p1, m1, p2, m2):
    return _qcs.qcs_mixing_two_density_matrix(p1, m1, p2, m2)

def qcs_create_horodecky_9x9_state(a):
    return _qcs.qcs_create_horodecky_9x9_state(a)

def qcs_create_horodecky_9x9_state_with_param(a, p):
    return _qcs.qcs_create_horodecky_9x9_state_with_param(a, p)

def qcs_create_horodecki_4x4_state(p, a, b):
    return _qcs.qcs_create_horodecki_4x4_state(p, a, b)

def qcs_create_ha_9x9_state(g):
    return _qcs.qcs_create_ha_9x9_state(g)

def qcs_create_ha_9x9_state_with_param(g, p):
    return _qcs.qcs_create_ha_9x9_state_with_param(g, p)

def qcs_create_w0_9x9_matrix():
    return _qcs.qcs_create_w0_9x9_matrix()

def qcs_create_maximally_mixed_state(x):
    return _qcs.qcs_create_maximally_mixed_state(x)

def qcs_create_maximally_mixed_state_with_param(x, p):
    return _qcs.qcs_create_maximally_mixed_state_with_param(x, p)

def qcs_update_horodecky_9x9_state(tmp, a):
    return _qcs.qcs_update_horodecky_9x9_state(tmp, a)

def qcs_update_horodecki_4x4_state(m, p, a, b):
    return _qcs.qcs_update_horodecki_4x4_state(m, p, a, b)

def qcs_update_ha_9x9_state(m, g):
    return _qcs.qcs_update_ha_9x9_state(m, g)

def qcs_witnesses_application_to_matrix(w, m):
    return _qcs.qcs_witnesses_application_to_matrix(w, m)

def qcs_ppt_criterion(m):
    return _qcs.qcs_ppt_criterion(m)

def qcs_ccnr_criterion(m):
    return _qcs.qcs_ccnr_criterion(m)

def qcs_create_depolarizing_channel_operator_for_qubit(m, p):
    return _qcs.qcs_create_depolarizing_channel_operator_for_qubit(m, p)

def qcs_create_depolarizing_channel_operator_for_qudit(m, d, p):
    return _qcs.qcs_create_depolarizing_channel_operator_for_qudit(m, d, p)

def qcs_create_amplitude_damping_operator_for_qubit(m, p):
    return _qcs.qcs_create_amplitude_damping_operator_for_qubit(m, p)

def qcs_create_amplitude_damping_operator_for_qudit(m, d, p):
    return _qcs.qcs_create_amplitude_damping_operator_for_qudit(m, d, p)

def qcs_create_phase_damping_operator_for_qubit(m, p):
    return _qcs.qcs_create_phase_damping_operator_for_qubit(m, p)

def qcs_create_phase_damping_v2_operator_for_qubit(m, p):
    return _qcs.qcs_create_phase_damping_v2_operator_for_qubit(m, p)

def qcs_create_phase_damping_operator_for_qudit(m, d, p):
    return _qcs.qcs_create_phase_damping_operator_for_qudit(m, d, p)

def qcs_create_phase_flip_operator_for_qubit(m, p):
    return _qcs.qcs_create_phase_flip_operator_for_qubit(m, p)

def qcs_create_bit_flip_operator_for_qubit(m, p):
    return _qcs.qcs_create_bit_flip_operator_for_qubit(m, p)

def qcs_create_bit_flip_operator_for_qudit(m, d, p):
    return _qcs.qcs_create_bit_flip_operator_for_qudit(m, d, p)

def qcs_create_bit_phase_flip_operator_for_qubit(m, p):
    return _qcs.qcs_create_bit_phase_flip_operator_for_qubit(m, p)

def qcs_create_bit_phase_flip_operator_for_qudit(m, d, p):
    return _qcs.qcs_create_bit_phase_flip_operator_for_qudit(m, d, p)

def qcs_create_matrix4x4(x1, x2, x3, x4):
    return _qcs.qcs_create_matrix4x4(x1, x2, x3, x4)

def qcs_delete_matrix4x4(m):
    return _qcs.qcs_delete_matrix4x4(m)

def qcs_set_cell_at_matrix4x4(a_in, x1, x2, x3, x4, m):
    return _qcs.qcs_set_cell_at_matrix4x4(a_in, x1, x2, x3, x4, m)

def qcs_set_cell_at_matrix4x4_direct(a_in, x1, x2, x3, x4, re, im):
    return _qcs.qcs_set_cell_at_matrix4x4_direct(a_in, x1, x2, x3, x4, re, im)

def qcs_get_cell_at_matrix4x4(a_in, x1, x2, x3, x4):
    return _qcs.qcs_get_cell_at_matrix4x4(a_in, x1, x2, x3, x4)

def qcs_zero_matrix4x4(a_in):
    return _qcs.qcs_zero_matrix4x4(a_in)

def qcs_print_matrix4x4(a_in):
    return _qcs.qcs_print_matrix4x4(a_in)

def qcs_create_int_matrix(rows, cols):
    return _qcs.qcs_create_int_matrix(rows, cols)

def qcs_delete_int_matrix(m):
    return _qcs.qcs_delete_int_matrix(m)

def qcs_set_cell_at_int_matrix(a_in, r, c, v):
    return _qcs.qcs_set_cell_at_int_matrix(a_in, r, c, v)

def qcs_get_cell_at_int_matrix(a_in, r, c):
    return _qcs.qcs_get_cell_at_int_matrix(a_in, r, c)

def qcs_print_int_matrix(a_in):
    return _qcs.qcs_print_int_matrix(a_in)

def qcs_create_int_matrix4x4(x1, x2, x3, x4):
    return _qcs.qcs_create_int_matrix4x4(x1, x2, x3, x4)

def qcs_delete_int_matrix4x4(a_in):
    return _qcs.qcs_delete_int_matrix4x4(a_in)

def qcs_set_cell_at_int_matrix4x4(a_in, x1, x2, x3, x4, v):
    return _qcs.qcs_set_cell_at_int_matrix4x4(a_in, x1, x2, x3, x4, v)

def qcs_get_cell_at_int_matrix4x4(a_in, x1, x2, x3, x4):
    return _qcs.qcs_get_cell_at_int_matrix4x4(a_in, x1, x2, x3, x4)

def qcs_zero_int_matrix4x4(a_in):
    return _qcs.qcs_zero_int_matrix4x4(a_in)

def qcs_print_int_matrix4x4(a_in):
    return _qcs.qcs_print_int_matrix4x4(a_in)

def get_zero_reset_gate():
    return _qcs.get_zero_reset_gate()

def get_id_gate():
    return _qcs.get_id_gate()

def get_not_gate():
    return _qcs.get_not_gate()

def get_pauli_x_gate():
    return _qcs.get_pauli_x_gate()

def get_pauli_y_gate():
    return _qcs.get_pauli_y_gate()

def get_pauli_z_gate():
    return _qcs.get_pauli_z_gate()

def get_hadamard_gate():
    return _qcs.get_hadamard_gate()

def get_square_root_gate():
    return _qcs.get_square_root_gate()

def get_x_rot90_gate():
    return _qcs.get_x_rot90_gate()

def get_y_rot90_gate():
    return _qcs.get_y_rot90_gate()

def get_z_rot90_gate():
    return _qcs.get_z_rot90_gate()

def get_minus_x_rot90_gate():
    return _qcs.get_minus_x_rot90_gate()

def get_minus_y_rot90_gate():
    return _qcs.get_minus_y_rot90_gate()

def get_minus_z_rot90_gate():
    return _qcs.get_minus_z_rot90_gate()

def get_rotate_alpha_gate():
    return _qcs.get_rotate_alpha_gate()

def get_rotate_theta_gate():
    return _qcs.get_rotate_theta_gate()

def get_t_gate():
    return _qcs.get_t_gate()

def get_s_gate():
    return _qcs.get_s_gate()

def get_phase_gate():
    return _qcs.get_phase_gate()

def get_phase_f_gate():
    return _qcs.get_phase_f_gate()

def get_phase_m11_gate():
    return _qcs.get_phase_m11_gate()

def get_cnot_gate():
    return _qcs.get_cnot_gate()

def get_toffoli_gate():
    return _qcs.get_toffoli_gate()

def get_swap_gate():
    return _qcs.get_swap_gate()

def get_fredkin_gate():
    return _qcs.get_fredkin_gate()

def qcs_get_rot_x_gate(theta):
    return _qcs.qcs_get_rot_x_gate(theta)

def qcs_get_rot_y_gate(theta):
    return _qcs.qcs_get_rot_y_gate(theta)

def qcs_get_rot_z_gate(theta):
    return _qcs.qcs_get_rot_z_gate(theta)

def qcs_create_matrix_for_e_2q_gate_float_arg(gamma):
    return _qcs.qcs_create_matrix_for_e_2q_gate_float_arg(gamma)

def qcs_create_matrix_for_e_2q_gate(gamma):
    return _qcs.qcs_create_matrix_for_e_2q_gate(gamma)

def qcs_create_matrix_for_ux_1q_gate_float_arg(phi, theta):
    return _qcs.qcs_create_matrix_for_ux_1q_gate_float_arg(phi, theta)

def qcs_create_matrix_for_ux_1q_gate(phi, theta):
    return _qcs.qcs_create_matrix_for_ux_1q_gate(phi, theta)

def give_qubit_matrix(arg):
    return _qcs.give_qubit_matrix(arg)

def qcs_create_matrix_for_qubit_gate_x():
    return _qcs.qcs_create_matrix_for_qubit_gate_x()

def qcs_create_matrix_for_qubit_gate_y():
    return _qcs.qcs_create_matrix_for_qubit_gate_y()

def qcs_create_matrix_for_qubit_gate_z():
    return _qcs.qcs_create_matrix_for_qubit_gate_z()

def qcs_create_matrix_for_qubit_gate_hadamard():
    return _qcs.qcs_create_matrix_for_qubit_gate_hadamard()

def qcs_1q_id_gate(in_qubit, out_qubit):
    return _qcs.qcs_1q_id_gate(in_qubit, out_qubit)

def qcs_1q_not_gate(in_qubit, out_qubit):
    return _qcs.qcs_1q_not_gate(in_qubit, out_qubit)

def qcs_1q_pauli_x_gate(in_qubit, out_qubit):
    return _qcs.qcs_1q_pauli_x_gate(in_qubit, out_qubit)

def qcs_1q_pauli_y_gate(in_qubit, out_qubit):
    return _qcs.qcs_1q_pauli_y_gate(in_qubit, out_qubit)

def qcs_1q_pauli_z_gate(in_qubit, out_qubit):
    return _qcs.qcs_1q_pauli_z_gate(in_qubit, out_qubit)

def qcs_1q_hadamard_gate(in_qubit, out_qubit):
    return _qcs.qcs_1q_hadamard_gate(in_qubit, out_qubit)

def qcs_1q_square_root_gate(in_qubit, out_qubit):
    return _qcs.qcs_1q_square_root_gate(in_qubit, out_qubit)

def qcs_1q_x_rotate90_gate(in_qubit, out_qubit):
    return _qcs.qcs_1q_x_rotate90_gate(in_qubit, out_qubit)

def qcs_1q_y_rotate90_gate(in_qubit, out_qubit):
    return _qcs.qcs_1q_y_rotate90_gate(in_qubit, out_qubit)

def qcs_1q_z_rotate90_gate(in_qubit, out_qubit):
    return _qcs.qcs_1q_z_rotate90_gate(in_qubit, out_qubit)

def qcs_1q_minus_x_rotate90_gate(in_qubit, out_qubit):
    return _qcs.qcs_1q_minus_x_rotate90_gate(in_qubit, out_qubit)

def qcs_1q_minus_y_rotate90_gate(in_qubit, out_qubit):
    return _qcs.qcs_1q_minus_y_rotate90_gate(in_qubit, out_qubit)

def qcs_1q_minus_z_rotate90_gate(in_qubit, out_qubit):
    return _qcs.qcs_1q_minus_z_rotate90_gate(in_qubit, out_qubit)

def qcs_1q_rotate_alpha_gate(in_qubit, k, out_qubit):
    return _qcs.qcs_1q_rotate_alpha_gate(in_qubit, k, out_qubit)

def qcs_1q_rotate_theta_gate(in_qubit, theta, out_qubit):
    return _qcs.qcs_1q_rotate_theta_gate(in_qubit, theta, out_qubit)

def qcs_1q_t_gate(in_qubit, out_qubit):
    return _qcs.qcs_1q_t_gate(in_qubit, out_qubit)

def qcs_1q_s_gate(in_qubit, out_qubit):
    return _qcs.qcs_1q_s_gate(in_qubit, out_qubit)

def qcs_1q_phase_gate(in_qubit, k, out_qubit):
    return _qcs.qcs_1q_phase_gate(in_qubit, k, out_qubit)

def qcs_1q_phase_f_gate(in_qubit, out_qubit):
    return _qcs.qcs_1q_phase_f_gate(in_qubit, out_qubit)

def qcs_1q_arbitrary_gate(matrix, in_qubit, out_qubit):
    return _qcs.qcs_1q_arbitrary_gate(matrix, in_qubit, out_qubit)

def qcs_2q_cnot_gate_pqc(in_qubit_1, in_qubit_2, out_qubit_1, out_qubit_2):
    return _qcs.qcs_2q_cnot_gate_pqc(in_qubit_1, in_qubit_2, out_qubit_1, out_qubit_2)

def qcs_3q_cnot_gate_pqc(in_qubit_1, in_qubit_2, in_qubit_3, out_qubit_1, out_qubit_2, out_qubit_3):
    return _qcs.qcs_3q_cnot_gate_pqc(in_qubit_1, in_qubit_2, in_qubit_3, out_qubit_1, out_qubit_2, out_qubit_3)

def qcs_4q_cnot_gate_pqc(in_qubit_1, in_qubit_2, in_qubit_3, in_qubit_4, out_qubit_1, out_qubit_2, out_qubit_3, out_qubit_4):
    return _qcs.qcs_4q_cnot_gate_pqc(in_qubit_1, in_qubit_2, in_qubit_3, in_qubit_4, out_qubit_1, out_qubit_2, out_qubit_3, out_qubit_4)

def make_matrix_for_one_qubit(gate_type, n, t):
    return _qcs.make_matrix_for_one_qubit(gate_type, n, t)

def make_arbitrary_matrix_for_one_qubit(gate, n, t):
    return _qcs.make_arbitrary_matrix_for_one_qubit(gate, n, t)

def add_one_qubit_gate_to_operation_matrix(u, gate, n, t):
    return _qcs.add_one_qubit_gate_to_operation_matrix(u, gate, n, t)

def crot45_two_qubit_syntesis_u_matrix_one_control_one_target(n, c1, t):
    return _qcs.crot45_two_qubit_syntesis_u_matrix_one_control_one_target(n, c1, t)

def crot90_two_qubit_syntesis_u_matrix_one_control_one_target(n, c1, t):
    return _qcs.crot90_two_qubit_syntesis_u_matrix_one_control_one_target(n, c1, t)

def crot_alpha_two_qubit_syntesis_u_matrix_one_control_one_target(n, c1, t, k):
    return _qcs.crot_alpha_two_qubit_syntesis_u_matrix_one_control_one_target(n, c1, t, k)

def cnot_qubit_syntesis_u_matrix_one_control_one_target(n, c1, t):
    return _qcs.cnot_qubit_syntesis_u_matrix_one_control_one_target(n, c1, t)

def cnot_qubit_syntesis_u_matrix_two_control_one_target(n, c1, c2, t):
    return _qcs.cnot_qubit_syntesis_u_matrix_two_control_one_target(n, c1, c2, t)

def cnot_qubit_syntesis_u_matrix_three_control_one_target(n, c1, c2, c3, t):
    return _qcs.cnot_qubit_syntesis_u_matrix_three_control_one_target(n, c1, c2, c3, t)

def cnot_qubit_syntesis_u_matrix_four_control_one_target(n, c1, c2, c3, c4, t):
    return _qcs.cnot_qubit_syntesis_u_matrix_four_control_one_target(n, c1, c2, c3, c4, t)

def cnot_qubit_syntesis_u_matrix_five_control_one_target(n, c1, c2, c3, c4, c5, t):
    return _qcs.cnot_qubit_syntesis_u_matrix_five_control_one_target(n, c1, c2, c3, c4, c5, t)

def cnot_qubit_syntesis_u_matrix_one_control_one_target_zero_control(n, c1, t):
    return _qcs.cnot_qubit_syntesis_u_matrix_one_control_one_target_zero_control(n, c1, t)

def cnot_qubit_syntesis_u_matrix_two_control_one_target_zero_control(n, c1, c2, t):
    return _qcs.cnot_qubit_syntesis_u_matrix_two_control_one_target_zero_control(n, c1, c2, t)

def cnot_qubit_syntesis_u_matrix_three_control_one_target_zero_control(n, c1, c2, c3, t):
    return _qcs.cnot_qubit_syntesis_u_matrix_three_control_one_target_zero_control(n, c1, c2, c3, t)

def cnot_qubit_syntesis_u_matrix_four_control_one_target_zero_control(n, c1, c2, c3, c4, t):
    return _qcs.cnot_qubit_syntesis_u_matrix_four_control_one_target_zero_control(n, c1, c2, c3, c4, t)

def cnot_qubit_syntesis_u_matrix_five_control_one_target_zero_control(n, c1, c2, c3, c4, c5, t):
    return _qcs.cnot_qubit_syntesis_u_matrix_five_control_one_target_zero_control(n, c1, c2, c3, c4, c5, t)

def make_arbitrary_matrix_for_two_qubit_gate(n, c1, t, u):
    return _qcs.make_arbitrary_matrix_for_two_qubit_gate(n, c1, t, u)

def make_arbitrary_matrix_for_three_qubit_gate(n, c1, c2, t, u):
    return _qcs.make_arbitrary_matrix_for_three_qubit_gate(n, c1, c2, t, u)

def two_qubit_syntesis_u_matrix_one_control_one_target(n, c1, t, a, b, c, d):
    return _qcs.two_qubit_syntesis_u_matrix_one_control_one_target(n, c1, t, a, b, c, d)

def three_qubit_syntesis_u_matrix_two_control_one_target(n, c1, c2, t, a, b, c, d):
    return _qcs.three_qubit_syntesis_u_matrix_two_control_one_target(n, c1, c2, t, a, b, c, d)

def four_qubit_syntesis_u_matrix_three_control_one_target(n, c1, c2, c3, t, a, b, c, d):
    return _qcs.four_qubit_syntesis_u_matrix_three_control_one_target(n, c1, c2, c3, t, a, b, c, d)

def five_qubit_syntesis_u_matrix_four_control_one_target(n, c1, c2, c3, c4, t, a, b, c, d):
    return _qcs.five_qubit_syntesis_u_matrix_four_control_one_target(n, c1, c2, c3, c4, t, a, b, c, d)

def six_qubit_syntesis_u_matrix_five_control_one_target(n, c1, c2, c3, c4, c5, t, a, b, c, d):
    return _qcs.six_qubit_syntesis_u_matrix_five_control_one_target(n, c1, c2, c3, c4, c5, t, a, b, c, d)

def two_qubit_syntesis_u_matrix_one_control_one_target_zero_control(n, c1, t, a, b, c, d):
    return _qcs.two_qubit_syntesis_u_matrix_one_control_one_target_zero_control(n, c1, t, a, b, c, d)

def three_qubit_syntesis_u_matrix_two_control_one_target_zero_control(n, c1, c2, t, a, b, c, d):
    return _qcs.three_qubit_syntesis_u_matrix_two_control_one_target_zero_control(n, c1, c2, t, a, b, c, d)

def four_qubit_syntesis_u_matrix_three_control_one_target_zero_control(n, c1, c2, c3, t, a, b, c, d):
    return _qcs.four_qubit_syntesis_u_matrix_three_control_one_target_zero_control(n, c1, c2, c3, t, a, b, c, d)

def five_qubit_syntesis_u_matrix_four_control_one_target_zero_control(n, c1, c2, c3, c4, t, a, b, c, d):
    return _qcs.five_qubit_syntesis_u_matrix_four_control_one_target_zero_control(n, c1, c2, c3, c4, t, a, b, c, d)

def six_qubit_syntesis_u_matrix_five_control_one_target_zero_control(n, c1, c2, c3, c4, c5, t, a, b, c, d):
    return _qcs.six_qubit_syntesis_u_matrix_five_control_one_target_zero_control(n, c1, c2, c3, c4, c5, t, a, b, c, d)

def create_xy_spins_hamiltonian(n):
    return _qcs.create_xy_spins_hamiltonian(n)

def create_xy_spins_hamiltonian_with_jn(n):
    return _qcs.create_xy_spins_hamiltonian_with_jn(n)

def create_xy_spins_hamiltonian_with_jn_for_qudit(n, freedom_level):
    return _qcs.create_xy_spins_hamiltonian_with_jn_for_qudit(n, freedom_level)

def qcs_create_matrix_of_unitary_operation_of_xy_spin_perfect_transfer(n, t):
    return _qcs.qcs_create_matrix_of_unitary_operation_of_xy_spin_perfect_transfer(n, t)

def qcs_create_matrix_of_unitary_operation_of_xy_spin_perfect_transfer_float_arg(n, t):
    return _qcs.qcs_create_matrix_of_unitary_operation_of_xy_spin_perfect_transfer_float_arg(n, t)

def qcs_build_qubit_gates_matrix():
    return _qcs.qcs_build_qubit_gates_matrix()

def qcs_destroy_qubit_gates_matrix():
    return _qcs.qcs_destroy_qubit_gates_matrix()
USE_NO_STATE_VECTOR = _qcs.USE_NO_STATE_VECTOR
USE_STATE_VECTOR_QUBIT = _qcs.USE_STATE_VECTOR_QUBIT
USE_STATE_VECTOR_QUDIT = _qcs.USE_STATE_VECTOR_QUDIT
USE_DENSITY_MATRIX = _qcs.USE_DENSITY_MATRIX
USE_GRAPH_STATE_DESC = _qcs.USE_GRAPH_STATE_DESC
USE_CHP_MODE = _qcs.USE_CHP_MODE
USE_ONEWAY_MODEL = _qcs.USE_ONEWAY_MODEL
USE_PQC_MODE = _qcs.USE_PQC_MODE
USE_STATE_VECTOR_MULTI_QUBITSQUDITS = _qcs.USE_STATE_VECTOR_MULTI_QUBITSQUDITS
USE_SYMBOLIC_STATE_VECTOR_QUBIT = _qcs.USE_SYMBOLIC_STATE_VECTOR_QUBIT
USE_SYMBOLIC_STATE_VECTOR_QUDIT = _qcs.USE_SYMBOLIC_STATE_VECTOR_QUDIT
ERROR_BAD_QUBIT_NUMBER = _qcs.ERROR_BAD_QUBIT_NUMBER
class QuantumRegister(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_qcs.QuantumRegister_n_get, _qcs.QuantumRegister_n_set)
    vec_state_size = property(_qcs.QuantumRegister_vec_state_size_get, _qcs.QuantumRegister_vec_state_size_set)
    fdl = property(_qcs.QuantumRegister_fdl_get, _qcs.QuantumRegister_fdl_set)
    mode = property(_qcs.QuantumRegister_mode_get, _qcs.QuantumRegister_mode_set)
    el = property(_qcs.QuantumRegister_el_get, _qcs.QuantumRegister_el_set)
    dim_of_qs = property(_qcs.QuantumRegister_dim_of_qs_get, _qcs.QuantumRegister_dim_of_qs_set)
    vs = property(_qcs.QuantumRegister_vs_get, _qcs.QuantumRegister_vs_set)

    def __init__(self, *args):
        r"""QuantumRegister()QuantumRegister(int size)"""
        _qcs.QuantumRegister_swiginit(self, _qcs.new_QuantumRegister(*args))
    __swig_destroy__ = _qcs.delete_QuantumRegister

    def Reset(self):
        r"""Reset()"""
        return _qcs.QuantumRegister_Reset(self)

    def SetGHZState(self):
        r"""SetGHZState()"""
        return _qcs.QuantumRegister_SetGHZState(self)

    def SetGHZ01State(self):
        r"""SetGHZ01State()"""
        return _qcs.QuantumRegister_SetGHZ01State(self)

    def PauliX(self, t):
        r"""PauliX(int t)"""
        return _qcs.QuantumRegister_PauliX(self, t)

    def PauliY(self, t):
        r"""PauliY(int t)"""
        return _qcs.QuantumRegister_PauliY(self, t)

    def PauliZ(self, t):
        r"""PauliZ(int t)"""
        return _qcs.QuantumRegister_PauliZ(self, t)

    def X(self, t):
        r"""X(int t)"""
        return _qcs.QuantumRegister_X(self, t)

    def Y(self, t):
        r"""Y(int t)"""
        return _qcs.QuantumRegister_Y(self, t)

    def Z(self, t):
        r"""Z(int t)"""
        return _qcs.QuantumRegister_Z(self, t)

    def XRotN(self, t, a):
        r"""XRotN(int t, double a)"""
        return _qcs.QuantumRegister_XRotN(self, t, a)

    def YRotN(self, t, a):
        r"""YRotN(int t, double a)"""
        return _qcs.QuantumRegister_YRotN(self, t, a)

    def ZRotN(self, t, a):
        r"""ZRotN(int t, double a)"""
        return _qcs.QuantumRegister_ZRotN(self, t, a)

    def RotAlphaN(self, i, alpha):
        r"""RotAlphaN(int i, tf_qcs_real_number alpha)"""
        return _qcs.QuantumRegister_RotAlphaN(self, i, alpha)

    def RotThetaN(self, i, theta):
        r"""RotThetaN(int i, tf_qcs_real_number theta)"""
        return _qcs.QuantumRegister_RotThetaN(self, i, theta)

    def MXRot90N(self, t):
        r"""MXRot90N(int t)"""
        return _qcs.QuantumRegister_MXRot90N(self, t)

    def MYRot90N(self, t):
        r"""MYRot90N(int t)"""
        return _qcs.QuantumRegister_MYRot90N(self, t)

    def MZRot90N(self, t):
        r"""MZRot90N(int t)"""
        return _qcs.QuantumRegister_MZRot90N(self, t)

    def XRot90N(self, t):
        r"""XRot90N(int t)"""
        return _qcs.QuantumRegister_XRot90N(self, t)

    def YRot90N(self, t):
        r"""YRot90N(int t)"""
        return _qcs.QuantumRegister_YRot90N(self, t)

    def ZRot90N(self, t):
        r"""ZRot90N(int t)"""
        return _qcs.QuantumRegister_ZRot90N(self, t)

    def Had(self, t):
        r"""Had(int t)"""
        return _qcs.QuantumRegister_Had(self, t)

    def HadN(self, t):
        r"""HadN(int t)"""
        return _qcs.QuantumRegister_HadN(self, t)

    def HadAll(self):
        r"""HadAll()"""
        return _qcs.QuantumRegister_HadAll(self)

    def SquareRootOfNotN(self, t):
        r"""SquareRootOfNotN(int t)"""
        return _qcs.QuantumRegister_SquareRootOfNotN(self, t)

    def SqrtOfNotN(self, t):
        r"""SqrtOfNotN(int t)"""
        return _qcs.QuantumRegister_SqrtOfNotN(self, t)

    def CNot(self, c, t):
        r"""CNot(int c, int t)"""
        return _qcs.QuantumRegister_CNot(self, c, t)

    def CHad(self, c, t):
        r"""CHad(int c, int t)"""
        return _qcs.QuantumRegister_CHad(self, c, t)

    def SwapGate(self, t1, t2):
        r"""CHad(int c, int t)"""
        return _qcs.QuantumRegister_SwapGate(self, t1, t2)

    def Measure(self):
        r"""Measure()"""
        return _qcs.QuantumRegister_Measure(self)

    def M(self, t):
        r"""M(int t)"""
        return _qcs.QuantumRegister_M(self, t)

    def MeasureN(self, _from, _to):
        r"""MeasureN(int _from, int _to)"""
        return _qcs.QuantumRegister_MeasureN(self, _from, _to)

    def MeasureOneQubit(self, t):
        r"""MeasureOneQubit(int t) -> int"""
        return _qcs.QuantumRegister_MeasureOneQubit(self, t)

    def ProbeQubitStdBase(self, i):
        r"""ProbeQubitStdBase(int i) -> [p0,p1]"""
        return _qcs.QuantumRegister_ProbeQubitStdBase(self, i)

    def GetProbabilityAmplitude(self, idx):
        r""" GetProbabilityAmplitude(int idx) -> [re,im]"""
        return _qcs.QuantumRegister_GetProbabilityAmplitude(self, idx)

    def ToNumpyArray( self ):
    	import numpy as np

    	num_of_elems = self.vec_state_size
    	svec = np.zeros( shape=(num_of_elems,1), dtype=complex )
    	for idx in range(num_of_elems):
    		(re,im) = self.GetProbabilityAmplitude(idx)
    		svec[idx] = re + im * 1J

    	return svec


    def Noop(self):
        r"""Noop()"""
        return _qcs.QuantumRegister_Noop(self)

    def Pr(self):
        r"""Pr()"""
        return _qcs.QuantumRegister_Pr(self)

    def PrSqr(self):
        r"""PrSqr()"""
        return _qcs.QuantumRegister_PrSqr(self)

    def PrFull(self):
        r"""PrFull()"""
        return _qcs.QuantumRegister_PrFull(self)

    def PrFullSqr(self):
        r"""PrFullSqr()"""
        return _qcs.QuantumRegister_PrFullSqr(self)

    def PrAsMatlab(self):
        r"""PrAsMatlab()"""
        return _qcs.QuantumRegister_PrAsMatlab(self)

    def PrAsMathematica(self):
        r"""PrAsMathematica()"""
        return _qcs.QuantumRegister_PrAsMathematica(self)

# Register QuantumRegister in _qcs:
_qcs.QuantumRegister_swigregister(QuantumRegister)

def qcs_new_quantum_register(size):
    return _qcs.qcs_new_quantum_register(size)

def qcs_delete_quantum_register(q_reg):
    return _qcs.qcs_delete_quantum_register(q_reg)

def qcs_quantum_register_reset_error_level(q_reg, v):
    return _qcs.qcs_quantum_register_reset_error_level(q_reg, v)

def qcs_quantum_register_set_error_level(q_reg, v):
    return _qcs.qcs_quantum_register_set_error_level(q_reg, v)

def qcs_quantum_register_get_error_level(q_reg):
    return _qcs.qcs_quantum_register_get_error_level(q_reg)

def qcs_quantum_register_reset(q_reg):
    return _qcs.qcs_quantum_register_reset(q_reg)

def qcs_quantum_register_set_state_dec(q_reg, n):
    return _qcs.qcs_quantum_register_set_state_dec(q_reg, n)

def qcs_quantum_register_set_state_bin(q_reg, state_desc):
    return _qcs.qcs_quantum_register_set_state_bin(q_reg, state_desc)

def qcs_quantum_register_print_bin(q_reg):
    return _qcs.qcs_quantum_register_print_bin(q_reg)

def qcs_quantum_register_print_bin_in_matlab_format(q_reg):
    return _qcs.qcs_quantum_register_print_bin_in_matlab_format(q_reg)

def qcs_quantum_register_print_bin_sqr(q_reg):
    return _qcs.qcs_quantum_register_print_bin_sqr(q_reg)

def qcs_quantum_register_print_bin_full(q_reg):
    return _qcs.qcs_quantum_register_print_bin_full(q_reg)

def qcs_quantum_register_print_bin_full_sqr(q_reg):
    return _qcs.qcs_quantum_register_print_bin_full_sqr(q_reg)

def qcs_quantum_register_print_bin_with_prefix(q_reg, prefix):
    return _qcs.qcs_quantum_register_print_bin_with_prefix(q_reg, prefix)

def qcs_quantum_register_print_dec(q_reg):
    return _qcs.qcs_quantum_register_print_dec(q_reg)

def qcs_quantum_register_fill_zero(q_reg):
    return _qcs.qcs_quantum_register_fill_zero(q_reg)

def qcs_quantum_register_set_ghz_state(q_reg):
    return _qcs.qcs_quantum_register_set_ghz_state(q_reg)

def applied_1q_gate_to_quantum_register(q_reg, t, u):
    return _qcs.applied_1q_gate_to_quantum_register(q_reg, t, u)

def applied_2q_gate_to_quantum_register_one_control(q_reg, c1, t, u):
    return _qcs.applied_2q_gate_to_quantum_register_one_control(q_reg, c1, t, u)

def qcs_quantum_register_pauli_x_gate(q_reg, i):
    return _qcs.qcs_quantum_register_pauli_x_gate(q_reg, i)

def qcs_quantum_register_pauli_y_gate(q_reg, i):
    return _qcs.qcs_quantum_register_pauli_y_gate(q_reg, i)

def qcs_quantum_register_pauli_z_gate(q_reg, i):
    return _qcs.qcs_quantum_register_pauli_z_gate(q_reg, i)

def qcs_quantum_register_had_n_gate(q_reg, i):
    return _qcs.qcs_quantum_register_had_n_gate(q_reg, i)

def qcs_quantum_register_had_n_conj_gate(q_reg, i):
    return _qcs.qcs_quantum_register_had_n_conj_gate(q_reg, i)

def qcs_quantum_register_had_gate_for_whole_register(q_reg):
    return _qcs.qcs_quantum_register_had_gate_for_whole_register(q_reg)

def qcs_quantum_register_square_root_not_n_gate(q_reg, i):
    return _qcs.qcs_quantum_register_square_root_not_n_gate(q_reg, i)

def qcs_quantum_register_x_rot90_n_gate(q_reg, i):
    return _qcs.qcs_quantum_register_x_rot90_n_gate(q_reg, i)

def qcs_quantum_register_y_rot90_n_gate(q_reg, i):
    return _qcs.qcs_quantum_register_y_rot90_n_gate(q_reg, i)

def qcs_quantum_register_z_rot90_n_gate(q_reg, i):
    return _qcs.qcs_quantum_register_z_rot90_n_gate(q_reg, i)

def qcs_quantum_register_mx_rot90_n_gate(q_reg, i):
    return _qcs.qcs_quantum_register_mx_rot90_n_gate(q_reg, i)

def qcs_quantum_register_my_rot90_n_gate(q_reg, i):
    return _qcs.qcs_quantum_register_my_rot90_n_gate(q_reg, i)

def qcs_quantum_register_mz_rot90_n_gate(q_reg, i):
    return _qcs.qcs_quantum_register_mz_rot90_n_gate(q_reg, i)

def qcs_quantum_register_x_rot_n_gate(q_reg, i, theta):
    return _qcs.qcs_quantum_register_x_rot_n_gate(q_reg, i, theta)

def qcs_quantum_register_y_rot_n_gate(q_reg, i, theta):
    return _qcs.qcs_quantum_register_y_rot_n_gate(q_reg, i, theta)

def qcs_quantum_register_z_rot_n_gate(q_reg, i, theta):
    return _qcs.qcs_quantum_register_z_rot_n_gate(q_reg, i, theta)

def qcs_quantum_register_rotate_alpha_n_gate(q_reg, i, alpha):
    return _qcs.qcs_quantum_register_rotate_alpha_n_gate(q_reg, i, alpha)

def qcs_quantum_register_rotate_theta_n_gate(q_reg, i, theta):
    return _qcs.qcs_quantum_register_rotate_theta_n_gate(q_reg, i, theta)

def qcs_quantum_register_t_n_gate(q_reg, i):
    return _qcs.qcs_quantum_register_t_n_gate(q_reg, i)

def qcs_quantum_register_v_n_gate(q_reg, i):
    return _qcs.qcs_quantum_register_v_n_gate(q_reg, i)

def qcs_quantum_register_s_n_gate(q_reg, i):
    return _qcs.qcs_quantum_register_s_n_gate(q_reg, i)

def qcs_quantum_register_s_adj_n_gate(q_reg, i):
    return _qcs.qcs_quantum_register_s_adj_n_gate(q_reg, i)

def qcs_quantum_register_phase_n_gate(q_reg, i):
    return _qcs.qcs_quantum_register_phase_n_gate(q_reg, i)

def qcs_quantum_register_phase_f_n_gate(q_reg, i):
    return _qcs.qcs_quantum_register_phase_f_n_gate(q_reg, i)

def qcs_qubit_arbitrary_one_qubit_gate(q_reg, gate, i):
    return _qcs.qcs_qubit_arbitrary_one_qubit_gate(q_reg, gate, i)

def qcs_arbitrary_single_gate(q_reg, m, i):
    return _qcs.qcs_arbitrary_single_gate(q_reg, m, i)

def qcs_quantum_register_cnot(q_reg, c1, t):
    return _qcs.qcs_quantum_register_cnot(q_reg, c1, t)

def qcs_quantum_register_cnot_conj(q_reg, c1, t):
    return _qcs.qcs_quantum_register_cnot_conj(q_reg, c1, t)

def qcs_quantum_register_swap_gate(q_reg, a, b):
    return _qcs.qcs_quantum_register_swap_gate(q_reg, a, b)

def qcs_quantum_reg_fredkin_gate(q_reg, a, b, c):
    return _qcs.qcs_quantum_reg_fredkin_gate(q_reg, a, b, c)

def qcs_quantum_register_measure_one_qubit(q_reg, k):
    return _qcs.qcs_quantum_register_measure_one_qubit(q_reg, k)

def qcs_quantum_register_measure_one_qubit_in_std_base(q_reg, k):
    return _qcs.qcs_quantum_register_measure_one_qubit_in_std_base(q_reg, k)

def qcs_quantum_register_measure_one_qubit_in_std_base_force(q_reg, k, force_result):
    return _qcs.qcs_quantum_register_measure_one_qubit_in_std_base_force(q_reg, k, force_result)

def qcs_quantum_register_measure_from_to(q_reg, q_from, q_to):
    return _qcs.qcs_quantum_register_measure_from_to(q_reg, q_from, q_to)

def qcs_quantum_register_probe_one_qubit_in_std_base(q_reg, t, out_value_0, out_value_1):
    return _qcs.qcs_quantum_register_probe_one_qubit_in_std_base(q_reg, t, out_value_0, out_value_1)

def qcs_quantum_register_get_probability_amplitude(q_reg, idx, out_value_re, out_value_im):
    return _qcs.qcs_quantum_register_get_probability_amplitude(q_reg, idx, out_value_re, out_value_im)

def qcs_quantum_register_generate_density_matrix(q_reg):
    return _qcs.qcs_quantum_register_generate_density_matrix(q_reg)


#def Arange(_s, _e, _step):
#	return qcs_create_matrix_arange_operation_with_float_args(_s, _e, _step)

#def Linspace(_s, _e, _n, endpoint = True):
#	if endpoint == True:
#		return qcs_create_matrix_linspace_operation_with_endpoint_with_float_args(_s, _e, _n)
#	else:
#		return qcs_create_matrix_linspace_operation_without_endpoint_with_float_args(_s, _e, _n)

def PrGateForm(gateName, param1=None):
	if gateName=="X":
		qcs_print_matrix( get_pauli_x_gate() )
		return

	if gateName=="Y":
		qcs_print_matrix( get_pauli_y_gate() )
		return

	if gateName=="Z":
		qcs_print_matrix( get_pauli_z_gate() )
		return

	if gateName=="H":
		qcs_print_matrix( get_hadamard_gate() )
		return

	if gateName=="CNOT":
		qcs_print_matrix( get_cnot_gate() )
		return

	if gateName=="RX":
		qcs_print_matrix( qcs_get_rot_x_gate( param1 ) )
		return

	if gateName=="RY":
		qcs_print_matrix( qcs_get_rot_y_gate( param1 ) )
		return

	if gateName=="RZ":
		qcs_print_matrix( qcs_get_rot_z_gate( param1 ) )
		return



